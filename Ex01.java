
public class Ex01 {

	public static void main(String[] args) {
		// **객체지향프로그래밍 특징 - 캡슐화 상속 추상화 다형성 ( 캡상추다 )

//      1. 캡슐화
      // 관련된 필드와 메소드를 하나로 묶는다.
      // 실제 구현 내용을 외부로부터 감추는 기법( 정보 은닉 )
      // 정보 은닉 : 만일의 상황( 타인이 외부에서 조작 )을 대비해서
      // 특정 속성이나 메소드를 사용자가 조작할 수 없도록 숨겨 놓은 것
      
//      2. 상속
      // 이미 작성된 클래스( 부모 )의 특성을 그대로 이어받아 새로운 클래스( 자식 )를 생성
      // 기존 코드를 그대로 재사용하거나 재정의 -> 재사용 + 확장
      
//      3. 추상화 + 캡슐화 -> 클래스 만드는 법 ~!
      // 공통적인 속성과 행위를 추출하는 기법
      // 상세정보는 무시하고 필요한 정보들만 간추려서 구성
      
//      4. 다형성 -> 메소드 오버로딩 / 오버라이딩 ( Overriding )
      // 같은 기능( 메소드 )을 호출하더라도 객체에 따라 다르게 동작하는 것
      // 상위 클래스의 동작을 하위클래스에서 다시 정의하여 사용하는 것 또한 다형성으로 볼 수 있음
      
      // 오버로딩 = 중복정의
      // 오버라이딩 = 재정의
      
      // **객체지향프로그래밍의 장점
      // 1. 코드 재사용이 쉽다.
      // 2. 유지보스가 용이하다.
      // 3. 소프트웨어 생산성이 향상된다.

		
		// private 같은 클래스 내에서만
		
		// default 같은 패키지내에서
		
		// protected 같은 패키지 + 상속관계
		
		// public 모든 곳
	}

}
